Module Bookstore
{
	Parameter ComposableFilter {}

	Entity Employee
	{
		Integer IdentificationNumber { AutoCode; }
		ShortString LastName { Required; }
		ShortString FirstName { Required; }
		ShortString Code { RegExMatch "\d{7,10}" "Code must have 7 to 10 digits."; }
		DateTime WorkStarted { Required; }
		DateTime WorkFinished;
		Integer TestPeriod { MinValue 1; MaxValue 12; }
		ShortString Iban { Required; Unique; MinLength 21; MaxLength 21; }
		ShortString Oib { RegExMatch "\d{11}" "OIB must have exactly 11 digits"; }
		Bool VirtualyDeleted { DefaultValue 'item => false'; }
		Datetime Created { Required; CreationTime; }
		Datetime Modified { ModificationTimeOf Bookstore.Employee.Oib; }
		Deactivatable;
		ShortString UserName;

		UniqueMultiple 'LastName FirstName';

		ItemFilter FinishBeforeStart 'employee => employee.WorkFinished != null	&& employee.WorkFinished.Value < employee.WorkStarted.Value';
		InvalidData FinishBeforeStart 'It is not allowed to enter a WorkFinished time before the WorkStarted time.';

		ComposableFilterBy ComposableFilter '(query, repository, parameter) =>
		{
			return query.Where(employee => employee.WorkFinished > DateTime.Now);
		}';
		InvalidData ComposableFilter 'Strange combination, realy...';

		ItemFilter VirtualyDeleted 'item => item.VirtualyDeleted != null && item.VirtualyDeleted.Value';
		Lock VirtualyDeleted "Employee has been soft deleted";

		Logging
		{
			Log Bookstore.Employee.FirstName;
			Log Bookstore.Employee.LastName;
			Log Bookstore.Employee.IdentificationNumber;
			Log Bookstore.Employee.Code;
			Log Bookstore.Employee.WorkStarted;
			Log Bookstore.Employee.WorkFinished;
			Log Bookstore.Employee.Iban;
			Log Bookstore.Employee.Oib;
			Log Bookstore.Employee.VirtualyDeleted;
		}
	}

	Entity Manager
	{
		Extends Bookstore.Employee;

		ShortString BonusInfo;
	}

	Entity Education
	{
		Reference Employee { Detail; }
		Date EducationDate;
		ShortString Description;
	}

	Entity Department
	{
		ShortString Code { Required; Unique; }
		ShortString Description;
	}

	Entity EmployeeDepartment
	{
		Reference Employee { Detail;}
		Reference Department { Required; }

		UniqueMultiple 'Employee Department';

		Logging { AllProperties; }
	}

	Entity Trainee
	{
		Extends Bookstore.Employee;
		Integer TrainingCompletedPercentage {Required;MinValue 0;MaxValue 100;}
	}

	SqlView Trainees <SQL\Trainees.sql> 
	{
		SqlDependsOn Bookstore.Trainee;
	}

	SqlQueryable EmployeeEducations <SQL\EmployeeEducations.sql>
	{
		Extends Bookstore.Employee;
		Integer NumberOfEducations;
		Integer TrainingCompletedPercentage;
	}
}