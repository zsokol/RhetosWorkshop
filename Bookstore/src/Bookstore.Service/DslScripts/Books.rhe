Module Bookstore
{
    Parameter LongBooks2{}
    Parameter LongBooks3
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
    }
    Parameter ComplexSearch
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
        Bool MaskTitles;
    }
    Parameter WantedBooks
    {
        Bool HighPriorityOnly;
    }
    Parameter UncertainExplanations2{}

    Entity Book
    {
        ShortString Code { Unique; Required; AutoCode;}
        ShortString Title { Required; }
        Integer NumberOfPages;
        Reference Author Bookstore.Person;

        ItemFilter LongBooks 'item => item.NumberOfPages >= 500';
        ComposableFilterBy LongBooks2 '(query, repository, parameter) =>
            {
                return query.Where(item => item.NumberOfPages >= 500);
            }';
        ComposableFilterBy LongBooks3 '(query, repository, parameter) =>
            {
                var filtered = query.Where(item => item.NumberOfPages >= parameter.MinimumPages);
                if (parameter.ForeignBooksOnly == true)
                    filtered = filtered.Where(item => item.Extension_ForeignBook.ID != null);
                return filtered;
            }';

        ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
        InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity". Please use "curiosity" instead.';

        ItemFilter ForeignAuthorXWithChapters 'item =>
            item.Author.Name.StartsWith("X")
            && item.Extension_ForeignBook.ID != null
            && _domRepository.Bookstore.Chapter.Subquery.Where(c => c.BookID == item.ID).Count() >= 3';

        FilterBy ComplexSearch '(repository, parameter) =>
        {
            var query = repository.Bookstore.Book.Query(item => item.NumberOfPages >= parameter.MinimumPages);
            if (parameter.ForeignBooksOnly == true)
                query = query.Where(item => item.Extension_ForeignBook.ID != null);
            Book[] books = query.ToSimple().ToArray();

            if (parameter.MaskTitles == true)
                foreach (var book in books.Where(b => !string.IsNullOrEmpty(b.Title)))
                    book.Title = book.Title.First() + "***" + book.Title.Last();

            return books;
        }';

        // Using a system type as a parameter.
        ComposableFilterBy 'System.String[]' '(query, repository, titles) =>
            {
                return query.Where(book => titles.Contains(book.Title));
            }';

        // Using an instance of an entity as a parameter.
        ComposableFilterBy 'Bookstore.Person' '(query, repository, author) =>
            {
                return query.Where(book => book.AuthorID == author.ID
                    || book.Author.Name == author.Name);
            }';
    }

    Entity Person
    {
        ShortString Name;
    }

    Entity Chapter
    {
        Reference Book { Detail; }
        LongString Heading;
    }

    Entity ChildrensBook
    {
        Extends Bookstore.Book;

        Integer AgeFrom;
        Integer AgeTo;
        IntegerRange AgeFrom AgeTo;
    }

    Entity ForeignBook
    {
        Extends Bookstore.Book;

        ShortString OriginalLanguage;
        Reference Translator Bookstore.Person;
    }

    Entity Topic
    {
        ShortString Name { Unique; Required; }
    }

    Entity BookTopic
    {
        Reference Book { Detail; }
        Reference Topic { Required; }

        UniqueMultiple 'Book Topic';
    }
    // WishList contains books that are not yet entered in the entity Book.
    Entity WishList
    {
        ShortString BookTitle;
        Bool HighPriority;
    }
    
    Entity Disposal
    {
        Reference Book { Required; }
        LongString Explanation { Required; }
        DateTime EffectiveSince { CreationTime; }
        Reference Book { Required; }

        ItemFilter ImportantBookExplanation 'item => item.Book.Title.Contains("important") && item.Explanation.Length < 50';
        InvalidData ImportantBookExplanation 'When disposing an important book, the explanation should be at least 50 characters long.';

        ItemFilter HighRating 'item => item.Book.Extension_BookRating.Rating > 100';
        InvalidData HighRating 'You are not allowed to dispose a book with rating above 100.';

        ItemFilter UncertainExplanations 'disposal => _domRepository.Bookstore.UncertainWord.Subquery.Any(uncertain => disposal.Explanation.Contains(uncertain.Word))';
        InvalidData UncertainExplanations 'The explanation contains uncertain words.';

        ComposableFilterBy UncertainExplanations2 '(query, repository, parameter) =>
        {
            var uncertainWords = _domRepository.Bookstore.UncertainWord.Query().Select(uncertain => uncertain.Word);
            return query.Where(disposal => uncertainWords.Any(word => disposal.Explanation.Contains(word)));
        }';
        InvalidData UncertainExplanations2 'The explanation contains uncertain words. (v2)';
    }

    Entity BookRating
    {
        Extends Bookstore.Book;
        Decimal Rating; // ComputedFrom Bookstore.ComputeBookRating
    }
    // Da bi radio primjer iz dokumentacije
    Entity BookDescription
    {
        Extends Bookstore.Book;
        LongString Description { Required; }
    }
    Entity UncertainWord
    {
        ShortString Word;
    }

    Browse BookGrid Bookstore.Book
    {
        Take Code;
        Take Title;
        Take 'Author.Name';
        Take TranslatorName 'Extension_ForeignBook.Translator.Name';
        Take Description 'Extension_BookDescription.Description';
        Take NumberOfChapters 'Extension_BookInfo.NumberOfChapters';

        // This query is an alternative data source for BookGrid.
        // Instead of reading data from the `Bookstore.Book`, it provides the new data from WantedBooks.
        Query 'Bookstore.WantedBooks' 'parameter =>
            {
                var wishList = _domRepository.Bookstore.WishList.Query();
                if (parameter != null && parameter.HighPriorityOnly == true)
                    wishList = wishList.Where(item => item.HighPriority == true);

                var wantedBooks = wishList.Select(wish => new Common.Queryable.Bookstore_BookGrid
                {
                    // All properies must be declared here, otherwise EF will throw a NotSupportedException.
                    ID = wish.ID,
                    Code = null,
                    Title = wish.BookTitle,
                    AuthorName = "unknown",
                    TranslatorName = null,
                    Description = null,
                    NumberOfChapters = null
                });
                return wantedBooks;
            }';
    }

    SqlQueryable BookInfo <SQL\BookInfo.sql>
    {
        Extends Bookstore.Book;
        Integer NumberOfChapters;

        AutodetectSqlDependencies;
    }

    Computed ExpectedBookRating 'repository =>
        {
            var books = repository.Bookstore.Book.Query()
                .Select(b =>
                    new
                    {
                        b.ID,
                        b.Title,
                        IsForeign = b.Extension_ForeignBook.ID != null
                    })
                .ToList();

            var ratings = new List<ExpectedBookRating>();
            foreach (var book in books)
            {
                decimal rating = 0;

                if (book.Title?.IndexOf("super", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    rating += 100;

                if (book.Title?.IndexOf("great", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    rating += 50;

                if (book.IsForeign)
                    rating *= 1.2m;

                ratings.Add(new ExpectedBookRating { ID = book.ID, Rating = rating });
            }

            return ratings.ToArray();
        }'
    {
        Extends Bookstore.Book;
        Decimal Rating;
    }

    SqlQueryAble BookTopics <SQL\BookTopics.sql>
    {
        Extends Bookstore.Book;
        Integer NumberOfTopics;
        AutoDetectSqlDependencies;
    }

    Browse BookByTopicsGrid Bookstore.Book
    {
        Take BookName 'Title';
        Take AuthorName 'Author.Name';
        Take NumberOfTopics 'Extension_BookTopics.NumberOfTopics';
    }

    Hardcoded Genre
    {
        ShortString Label;
        LongString Description;
        Bool IsFiction;

        Entry ScienceFiction
        {
            Value Label 'Science fiction';
            Value Description 'A speculative fiction with imagined elements that are inspired by natural sciences or social sciences.';
            Value IsFiction 1;
        }

        Entry Biography
        {
            Value Label 'Biography';
            Value Description 'A written narrative of a person''s life.';
            Value IsFiction 0;
        }
    }

    Action Insert5Books
        '(parameter, repository, userInfo) =>
        {
            for (int i = 0; i < 5; i++)
            {
                var newBook = new Bookstore.Book { Code = "B+++", Title = "New book" };
                repository.Bookstore.Book.Insert(newBook);
            }
        }';

    Action InsertManyBooks
    '(parameter, repository, userInfo) =>
    {
        for (int i = 0; i < parameter.NumberOfBooks; i++)
        {
            string newTitle = parameter.TitlePrefix + " - " + (i + 1);
            var newBook = new Bookstore.Book { Code = "+++", Title = newTitle };
            repository.Bookstore.Book.Insert(newBook);
        }
    }'
    {
        Integer NumberOfBooks;
        ShortString TitlePrefix;
    }
}